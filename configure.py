#!/usr/bin/env python3
import os
import sys
import json
import shutil
from pathlib import Path
import subprocess

# ANSI colors
GREEN = '\033[0;32m'
YELLOW = '\033[1;33m'
RED = '\033[0;31m'
CYAN = '\033[0;36m'
PURPLE = '\033[0;35m'
BOLD = '\033[1m'
NC = '\033[0m'  # No Color

def print_header(text):
    """Print a formatted header."""
    print(f"\n{PURPLE}{BOLD}{text}{NC}\n")

def print_success(text):
    """Print a success message."""
    print(f"{GREEN}[✓] {text}{NC}")

def print_error(text):
    """Print an error message."""
    print(f"{RED}[✗] {text}{NC}")

def print_info(text):
    """Print an info message."""
    print(f"{YELLOW}[i] {text}{NC}")

def print_step(text):
    """Print a step message."""
    print(f"{CYAN}[*] {text}{NC}")

class ConfigManager:
    def __init__(self):
        self.repo_dir = Path.cwd()
        self.bolt_dir = Path("/root/bolt.diy")
        self.env_path = self.repo_dir / ".env"
        self.bolt_env_path = self.bolt_dir / ".env.local"
        
        # Define mandatory and optional API keys
        self.mandatory_api_keys = {
            "NGROK_AUTH_TOKEN": None
        }
        
        self.optional_api_keys = {
            "OPENAI_API_KEY": None,
            "ANTHROPIC_API_KEY": None,
            "GROQ_API_KEY": None,
            "HUGGINGFACE_API_KEY": None,
            "OPEN_ROUTER_API_KEY": None,
            "GOOGLE_GENERATIVE_AI_API_KEY": None,
            "OLLAMA_API_BASE_URL": None,
            "TOGETHER_API_KEY": None,
            "DEEPSEEK_API_KEY": None,
            "HYPERBOLIC_API_KEY": None,
            "HYPERBOLIC_API_BASE_URL": None,
            "MISTRAL_API_KEY": None,
            "COHERE_API_KEY": None,
            "LMSTUDIO_API_BASE_URL": None,
            "XAI_API_KEY": None,
            "PERPLEXITY_API_KEY": None
        }

    def prompt_for_api_keys(self):
        """Prompt the user for API keys."""
        print_header("API KEY CONFIGURATION")
        print_info("Please enter your API keys. Press Enter to skip optional keys.")
        
        # Prompt for mandatory keys
        for key in self.mandatory_api_keys:
            while not self.mandatory_api_keys[key]:
                value = input(f"{YELLOW}{key} (required): {NC}")
                if value:
                    self.mandatory_api_keys[key] = value
                else:
                    print_error(f"{key} is required. Please enter a value.")
        
        print_info("\nOptional API keys (press Enter to skip):")
        
        # Prompt for optional keys
        for key in self.optional_api_keys:
            value = input(f"{YELLOW}{key}: {NC}")
            if value:
                self.optional_api_keys[key] = value

    def write_env_file(self):
        """Write the API keys to the .env file."""
        # Create directory if it doesn't exist
        self.env_path.parent.mkdir(parents=True, exist_ok=True)
        
        # Read existing content to preserve it
        existing_content = {}
        if self.env_path.exists():
            with open(self.env_path, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        existing_content[key] = value
        
        with open(self.env_path, 'w') as f:
            f.write("# API Keys for LLM Server\n")
            f.write("# Generated by RunPod Configure Script\n\n")
            
            # Write mandatory API keys
            for key, value in self.mandatory_api_keys.items():
                f.write(f"{key}={value}\n")
            
            # Write optional API keys
            for key, value in self.optional_api_keys.items():
                if value:
                    f.write(f"{key}={value}\n")
                else:
                    f.write(f"#{key}=\n")
            
            # Write existing content that we didn't overwrite
            for key, value in existing_content.items():
                if key not in self.mandatory_api_keys and key not in self.optional_api_keys:
                    f.write(f"{key}={value}\n")
        
        # Set secure permissions
        os.chmod(self.env_path, 0o600)
        print_success(f"Wrote API keys to {self.env_path}")

    def write_bolt_env_file(self):
        """Write the API keys to the bolt.diy .env.local file."""
        # Create directory if it doesn't exist
        self.bolt_env_path.parent.mkdir(parents=True, exist_ok=True)
        
        # Read existing content to preserve it
        existing_content = {}
        if self.bolt_env_path.exists():
            with open(self.bolt_env_path, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        existing_content[key] = value
        
        with open(self.bolt_env_path, 'w') as f:
            f.write("# API Keys for bolt.diy\n")
            f.write("# Generated by RunPod Configure Script\n\n")
            
            # Write API keys
            for key, value in self.optional_api_keys.items():
                if value:
                    f.write(f"{key}={value}\n")
                else:
                    f.write(f"#{key}=\n")
            
            # Write existing content that we didn't overwrite
            for key, value in existing_content.items():
                if key not in self.optional_api_keys:
                    f.write(f"{key}={value}\n")
            
            # Write local API URLs
            f.write("\n# Local API URLs\n")
            f.write("DEEPSEEK_LOCAL_API_BASE_URL=http://localhost:8000/v1\n")
            f.write("CODELLAMA_LOCAL_API_BASE_URL=http://localhost:8000/v1\n")
        
        # Set secure permissions
        os.chmod(self.bolt_env_path, 0o600)
        print_success(f"Wrote API keys to {self.bolt_env_path}")

    def check_bolt_diy(self):
        """Check if bolt.diy is installed and offer to clone it if not"""
        if not self.bolt_dir.exists():
            print_header("BOLT.DIY NOT FOUND")
            clone = input(f"{YELLOW}Would you like to clone bolt.diy repository? (y/n): {NC}").lower()
            
            if clone == 'y':
                print_info("Cloning bolt.diy repository...")
                try:
                    subprocess.run(
                        ["git", "clone", "https://github.com/stackblitz-labs/bolt.diy.git", str(self.bolt_dir)],
                        check=True
                    )
                    print_success("bolt.diy cloned successfully!")
                    
                    # Install dependencies
                    print_info("Installing bolt.diy dependencies...")
                    os.chdir(str(self.bolt_dir))
                    subprocess.run(["npm", "install"], check=True)
                    print_success("Dependencies installed successfully!")
                    
                    # Return to original directory
                    os.chdir(str(self.repo_dir))
                    return True
                except subprocess.CalledProcessError as e:
                    print_error(f"Failed to clone bolt.diy: {e}")
                    return False
            else:
                print_info("Skipping bolt.diy installation.")
                return False
        else:
            print_info("bolt.diy already installed.")
            return True

    def copy_vite_config(self):
        """Copy vite.config.ts to bolt.diy directory"""
        source = self.repo_dir / "vite.config.ts"
        destination = self.bolt_dir / "vite.config.ts"
        
        if source.exists():
            try:
                shutil.copy2(source, destination)
                print_success(f"Copied vite.config.ts to {destination}")
                return True
            except Exception as e:
                print_error(f"Failed to copy vite.config.ts: {e}")
                return False
        else:
            print_error("vite.config.ts not found in repository directory")
            return False

    def run(self):
        """Run the configuration process."""
        print_header("RUNPOD CONFIGURATION")
        
        # Check if bolt.diy is installed
        bolt_installed = self.check_bolt_diy()
        
        # Prompt for API keys
        self.prompt_for_api_keys()
        
        # Write API keys to .env file
        self.write_env_file()
        
        # Write API keys to bolt.diy .env.local file if bolt.diy is installed
        if bolt_installed:
            self.write_bolt_env_file()
            self.copy_vite_config()
        
        print("""
Your RunPod environment is now ready!

To start the API server:
  ./start-api.sh deepseek  # or ./start-api.sh codellama

To start bolt.diy:
  ./start-bolt.sh

To expose bolt.diy to the internet:
  ./expose-bolt.sh

In bolt.diy, select 'DeepseekLocal' or 'CodeLlamaLocal' provider.

Enjoy your local LLM experience!
        """)

if __name__ == "__main__":
    config_manager = ConfigManager()
    config_manager.run()